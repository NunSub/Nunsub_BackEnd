plugins {
	id 'java'
    id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'org.flywaydb.flyway' version '10.15.0'
}

group = 'dmu'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jar {
    enabled = false
}

repositories {
	mavenCentral()
}

dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.google.firebase:firebase-admin:9.1.1'

	implementation 'io.swagger.core.v3:swagger-annotations:2.2.30'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	implementation 'com.fasterxml.jackson.core:jackson-databind'

    implementation("org.flywaydb:flyway-core")

    runtimeOnly 'org.postgresql:postgresql:42.7.7' // PostgreSQL JDBC 드라이버

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'



}

tasks.named('test') {
	useJUnitPlatform()
}

// Flyway 설정을 추가합니다.
task runFlywayMigrate(type: JavaExec) {
    group = "migration"
    description = "Runs Flyway database migration programmatically."

    // 실행할 main 클래스를 지정합니다.
    mainClass = "dmu.noonsub_backend.migration.FlywayMigrator"

    // Spring Boot 애플리케이션의 런타임 클래스 경로를 그대로 사용합니다.
    classpath = sourceSets.main.runtimeClasspath

    // CI/CD 환경 변수를 이 작업에 전달합니다.
    environment 'DB_URL', System.getenv('DB_URL')
    environment 'DB_USER', System.getenv('DB_USER')
    environment 'DB_PASSWORD', System.getenv('DB_PASSWORD')
}