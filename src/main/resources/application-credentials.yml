spring:
  datasource:
    url: ${POST_DB_URL}?rewriteBatchedInserts=true
    username: ${POST_DB_USERNAME}
    password: ${POST_DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO}
    show-sql: ${SHOW_SQL}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 500
        order_updates: true
        order_inserts: true
        generate_statistics: true
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

jwt:
  secret: ${JWT_SECRET}
  access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
  refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION}
  secondary-auth-token-expiration: ${JWT_SECONDARY_AUTH_TOKEN_EXPIRATION}

openbanking:
  # authorize-url: https://testapi.openbanking.or.kr/oauth/2.0/authorize
  # token-url: https://testapi.openbanking.or.kr/oauth/2.0/token
  # base-url: https://testapi.openbanking.or.kr/
  authorize-url: ${OPENBANKING_AUTHORIZE_URL} # Mock URL
  token-url: ${OPENBANKING_TOKEN_URL} # Mock URL
  base-url: ${OPENBANKING_BASE_URL} # Mock URL
  client-id: ${OPENBANKING_CLIENT_ID}
  client-secret: ${OPENBANKING_CLIENT_SECRET}
  client-use-code: ${OPENBANKING_CLIENT_USE_CODE}
  redirect-uri: ${OPENBANKING_REDIRECT_URI}
  scope: ${OPENBANKING_SCOPE}
  mtls:
    cert-path: "classpath:certs/openbanking_test_client.p12"
    cert-password: "test_password"
  crypto:
    secret-key: ${OPENBANKING_CRYPTO_SECRET_KEY}