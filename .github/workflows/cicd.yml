name: Deploy to GCE with Blue-Green (nunsub)

# 메인 브랜치에 코드가 푸시될 때 워크 플로우를 실행
on:
  push:
    branches:
      - main

# 워크플로우 전체에서 사용할 환경 변수
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-west1-a
  SERVICE_NAME: nunsub-backend

jobs:
  # Docker 이미지를 빌드하고 Artifact Registry에 푸시
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Workload Identity Federation을 사용해 GCP 인증
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # 3. Cloud Build를 사용해 이미지를 빌드하고 Artifact Registry에 푸시
      - name: Build and Push Docker Image
        run: |-
          gcloud builds submit --region=${{ env.GAR_LOCATION }} --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

  # 데이터베이스 스키마 마이그레이션
  migrate-database:
    name: Migrate Database Schema
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 성공해야 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. JDK 환경 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 2. Gradle 실행 권한 부여
      - name: Grand execute permission for gradlew
        run: chmod +x ./gradlew

      # 3. Flyway 마이그레이션 실행
      - name: Run DB Migration with Flyway
        env:
          DB_URL: ${{ secrets.POST_DB_URL }}
          DB_USERNAME: ${{ secrets.POST_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.POST_DB_PASSWORD }}
        run: ./gradlew flywayMigrate -i

      # GCE에 접속하여 새 버전의 서비스 배포
    deploy:
      name: Deploy to GCE with Blue-Green Deployment
      runs-on: ubuntu-latest
      needs: migrate-database # migrate-database 작업이 성공해야 실행

      steps:
        # 1. SSH를 통해 GCE VM에 접속후 정의된 스크립트 실행
        - name: Deploy to GCE
          uses: appleboy/ssh-action@v1.0.3
          with:
            # SSH 접속에 필요한 정보를 GitHub Secrets에서 가져옴
            host: ${{ secrets.GCE_HOST }}
            username: ${{ secrets.GCE_USERNAME }}
            key: ${{ secrets.GCE_PRIVATE_KEY }}
            # 'script' 블록 안에 있는 명령어들이 GCE VM에서 순차적으로 실행
            script: |
              cd /home/ubuntu/nunsub-backend
              
              echo "POST_DB_URL=${{ secrets.POST_DB_URL }}" > .env
              echo "POST_DB_USERNAME=${{ secrets.POST_DB_USERNAME }}" >> .env
              echo "POST_DB_PASSWORD=${{ secrets.POST_DB_PASSWORD }}" >> .env
              echo "DDL_AUTO=${{ secrets.DDL_AUTO }}" >> .env
              echo "SHOW_SQL=${{ secrets.SHOW_SQL }}" >> .env
              echo "MONGO_DB_URl=${{ secrets.MONGO_DB_URl }}" >> .env
              echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
              echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
              echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
              echo "JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}" >> .env
              echo "JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}" >> .env
              echo "JWT_SECONDARY_AUTH_TOKEN_EXPIRATION=${{ secrets.JWT_SECONDARY_AUTH_TOKEN_EXPIRATION }}" >> .env
              echo "OPENBANKING_CLIENT_ID=${{ secrets.OPENBANKING_CLIENT_ID }}" >> .env
              echo "OPENBANKING_CLIENT_SECRET=${{ secrets.OPENBANKING_CLIENT_SECRET }}" >> .env
              echo "OPENBANKING_REDIRECT_URI=${{ secrets.OPENBANKING_REDIRECT_URI }}" >> .env
              echo "OPENBANKING_CRYPTO_SECRET_KEY=${{ secrets.OPENBANKING_CRYPTO_SECRET_KEY }}" >> .env
              
              gcloud auth configure-docker us-west1-a-docker.pkg.dev
              
              docker-compose pull nunsub-backend-blue
              docker-compose pull nunsub-backend-green
              
              ./deploy.sh
