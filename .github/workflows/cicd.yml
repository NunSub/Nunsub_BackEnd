name: Deploy to GCE with Blue-Green (nunsub)

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-west1
  SERVICE_NAME: nunsub-backend

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - name: Build and Push Docker Image
        run: |-
          gcloud builds submit --region=${{ env.GAR_LOCATION }} --tag ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

  migrate-database:
    name: Migrate Database Schema
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Download Cloud SQL Auth Proxy
        run: wget https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.8.2/cloud-sql-proxy.linux.amd64 -O cloud-sql-proxy && chmod +x cloud-sql-proxy

      - name: Start Cloud SQL Auth Proxy
        run: ./cloud-sql-proxy --port 5432 ${{ secrets.INSTANCE_CONNECTION_NAME }} > proxy.log 2>&1 &

      # ❗수정됨: 불필요한 sleep, pg_isready 단계를 제거하고 이 단계 하나로 통일
      - name: Wait for Proxy to be ready
        run: |
          timeout=60
          while ! nc -z 127.0.0.1 5432; do
            if [ $timeout -le 0 ]; then
              echo "ERROR: Timed out waiting for Cloud SQL Auth Proxy."
              cat proxy.log
              exit 1
            fi
            sleep 1
            timeout=$((timeout-1))
          done
          echo "Cloud SQL Auth Proxy is ready!"

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run DB Migration with Flyway
        env:
          DB_URL: jdbc:postgresql://127.0.0.1:5432/${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.POST_DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.POST_DB_PASSWORD }}
        run: ./gradlew runFlywayMigrate -i

  deploy:
    name: Deploy to GCE with Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: migrate-database
    steps:
      - name: Deploy to GCE
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCE_HOST }}
          username: ${{ secrets.GCE_USERNAME }}
          key: ${{ secrets.GCE_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/nunsub-backend
            
            # .env 파일 생성
            echo "POST_DB_URL=${{ secrets.POST_DB_URL }}" > .env
            echo "POST_DB_USERNAME=${{ secrets.POST_DB_USERNAME }}" >> .env
            echo "POST_DB_PASSWORD=${{ secrets.POST_DB_PASSWORD }}" >> .env
            echo "DDL_AUTO=${{ secrets.DDL_AUTO }}" >> .env
            echo "SHOW_SQL=${{ secrets.SHOW_SQL }}" >> .env
            echo "MONGO_DB_URl=${{ secrets.MONGO_DB_URl }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "JWT_ACCESS_TOKEN_EXPIRATION=${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION }}" >> .env
            echo "JWT_REFRESH_TOKEN_EXPIRATION=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION }}" >> .env
            echo "JWT_SECONDARY_AUTH_TOKEN_EXPIRATION=${{ secrets.JWT_SECONDARY_AUTH_TOKEN_EXPIRATION }}" >> .env
            echo "OPENBANKING_CLIENT_ID=${{ secrets.OPENBANKING_CLIENT_ID }}" >> .env
            echo "OPENBANKING_CLIENT_SECRET=${{ secrets.OPENBANKING_CLIENT_SECRET }}" >> .env
            echo "OPENBANKING_REDIRECT_URI=${{ secrets.OPENBANKING_REDIRECT_URI }}" >> .env
            echo "OPENBANKING_CRYPTO_SECRET_KEY=${{ secrets.OPENBANKING_CRYPTO_SECRET_KEY }}" >> .env
            
            # Docker 인증 및 배포 스크립트 실행
            gcloud auth configure-docker us-west1-docker.pkg.dev
            docker-compose pull nunsub-backend-blue
            docker-compose pull nunsub-backend-green
            ./deploy.sh